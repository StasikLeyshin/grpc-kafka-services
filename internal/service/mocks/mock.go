// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/StasikLeyshin/grpc-kafka-services/internal/models"
	model "github.com/StasikLeyshin/grpc-kafka-services/internal/service/server/model"
	gomock "github.com/golang/mock/gomock"
)

// MockServerService is a mock of ServerService interface.
type MockServerService struct {
	ctrl     *gomock.Controller
	recorder *MockServerServiceMockRecorder
}

// MockServerServiceMockRecorder is the mock recorder for MockServerService.
type MockServerServiceMockRecorder struct {
	mock *MockServerService
}

// NewMockServerService creates a new mock instance.
func NewMockServerService(ctrl *gomock.Controller) *MockServerService {
	mock := &MockServerService{ctrl: ctrl}
	mock.recorder = &MockServerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerService) EXPECT() *MockServerServiceMockRecorder {
	return m.recorder
}

// CreateServer mocks base method.
func (m *MockServerService) CreateServer(ctx context.Context, server *model.CreateServerRequest) (*model.CreateServerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, server)
	ret0, _ := ret[0].(*model.CreateServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockServerServiceMockRecorder) CreateServer(ctx, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockServerService)(nil).CreateServer), ctx, server)
}

// MockServerConsumerService is a mock of ServerConsumerService interface.
type MockServerConsumerService struct {
	ctrl     *gomock.Controller
	recorder *MockServerConsumerServiceMockRecorder
}

// MockServerConsumerServiceMockRecorder is the mock recorder for MockServerConsumerService.
type MockServerConsumerServiceMockRecorder struct {
	mock *MockServerConsumerService
}

// NewMockServerConsumerService creates a new mock instance.
func NewMockServerConsumerService(ctrl *gomock.Controller) *MockServerConsumerService {
	mock := &MockServerConsumerService{ctrl: ctrl}
	mock.recorder = &MockServerConsumerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerConsumerService) EXPECT() *MockServerConsumerServiceMockRecorder {
	return m.recorder
}

// CreateServer mocks base method.
func (m *MockServerConsumerService) CreateServer(ctx context.Context, server *models.Server, userUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, server, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockServerConsumerServiceMockRecorder) CreateServer(ctx, server, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockServerConsumerService)(nil).CreateServer), ctx, server, userUUID)
}
